name: Pull Request

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: "22.14.0"

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    name: "Lintowanie kodu"
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

  test:
    name: "Testy jednostkowe"
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  status-comment:
    name: "Komentarz statusu"
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()
    env:
      NODE_ENV: test
    steps:
      - name: Check job results
        id: check-results
        run: |
          lint_result="${{ needs.lint.result }}"
          test_result="${{ needs.test.result }}"

          if [[ "$lint_result" == "success" && "$test_result" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Wszystkie kontrole przeszły pomyślnie! PR jest gotowy do przeglądu." >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            failing_jobs=""
            [[ "$lint_result" != "success" ]] && failing_jobs+="• Lintowanie: $lint_result\n"
            [[ "$test_result" != "success" ]] && failing_jobs+="• Testy: $test_result\n"
            echo "message=❌ Niektóre kontrole nie powiodły się:\n\n$failing_jobs\nSprawdź logi powyżej, aby uzyskać więcej informacji." >> $GITHUB_OUTPUT
          fi

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.check-results.outputs.status }}';
            const message = `${{ steps.check-results.outputs.message }}`;

            const comment = `## 🤖 Status kontroli PR

            ${message}

            **Szczegóły jobów:**
            - **Lintowanie:** ${{ needs.lint.result == 'success' && '✅' || '❌' }} ${{ needs.lint.result }}
            - **Testy jednostkowe:** ${{ needs.test.result == 'success' && '✅' || '❌' }} ${{ needs.test.result }}

            ---
            *Automatycznie wygenerowane przez GitHub Actions*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
